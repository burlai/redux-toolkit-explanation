import { createSlice, PayloadAction } from "@reduxjs/toolkit";

const itemFormSlice = createSlice({
  name: "itemForm",
  initialState: {
    id: "",
    name: "",
    price: undefined as number | undefined,
    amount: undefined as number | undefined,
  },
  reducers: {
    setItemName: (state, action: PayloadAction<string>) => {
      // PayloadAction is a type that describes the action object
      // that is dispatched to the reducer. It has a type property and a payload property.
      state.name = action.payload;
    },
    setItemPrice: (state, action: PayloadAction<number | undefined>) => {
      state.price = action.payload; // we can change the state directly because of immer.js
      // immer.js is a library that allows us to write immutable code in a mutable way.
      // It is used by default in redux toolkit.
    },
    setItemAmount: (state, action: PayloadAction<number | undefined>) => {
      state.amount = action.payload;
    },
  },
});

export const { setItemName, setItemPrice, setItemAmount } =
  itemFormSlice.actions; // actions will be generated by redux toolkit based on the reducers
export const itemFormReducer = itemFormSlice.reducer; // reducer will be generated by redux toolkit based on the slice
